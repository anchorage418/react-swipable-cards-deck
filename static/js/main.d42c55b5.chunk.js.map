{"version":3,"sources":["Deck/Deck.jsx","App.js","reportWebVitals.js","index.js"],"names":["cardTrans","z","containerTrans","x","y","rot","useGestureOpts","filterTaps","Deck","forwardRef","props","ref","adaptiveHeight","shiftY","items","leftLabel","maxVisibleStack","onDeckHeightChange","onSwipeLeft","onSwipeRight","onSwipeStart","onSwipeEnd","renderItem","rightLabel","translateZ","trashhold","useState","drag","heights","logs","setLogs","deck","setDeck","Set","gone","currentIndex","setCurrentIndex","label","setLabel","height","setHeight","resize","setResize","isCardSwiped","setIsCardSwiped","useSprings","length","i","delay","to","from","springs","setSprings","containerHeight","console","log","elements","useRef","heightRef","prevItems","cardChildMeasureRef","useCallback","node","current","elList","id","offsetHeight","Object","keys","n","updateCard","cardIndex","cb","updCard","nextDeck","getNextCardsIndexes","currIndex","map","o","splice","getUngoneIndexes","has","filter","getX","dir","window","innerWidth","jumpToCardIndex","index","ungone","add","delete","indexOf","swipeBack","goneArr","size","item","swipeLeft","cardIndexToSwipe","config","friction","tension","swipeRight","useEffect","calcMax","arr","el","style","contentHeight","max","Math","debouncedResCb","debounce","addEventListener","removeEventListener","clear","JSON","stringify","useImperativeHandle","bind","useDrag","gestureState","event","args","down","mx","movement","xDir","direction","humanDir","onRest","isReadyToLeave","floor","abs","changeLabel","eventType","type","pointerType","Fragment","padding","position","zIndex","wordBreak","className","minHeight","div","visibility","transform","interpolate","touchAction","boxSizing","memo","deck_a","name","deck_b","getCardsWithRandomHeight","min","ceil","random","App","setItems","deckRef","onClick","cardClick","color","textAlign","placeholder","document","getElementById","value","card","updateCardName","margin","fontStyle","right","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d42c55b5.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect, forwardRef, useRef, useImperativeHandle, useCallback, memo } from 'react'\nimport PropTypes from 'prop-types';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useDrag } from 'react-use-gesture';\nimport map from 'lodash/map';\nimport debounce from 'lodash/debounce';\nimport './Deck.css';\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = (i, shiftY, translateZ) => ({ x: 0, y: i * shiftY, z: i * translateZ, rot: 0, delay: i * 100 });\nconst from = i => ({ x: 0, y: 0, z: 0, rot: 0 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst cardTrans = (z) => `perspective(1500px) translateZ(${z}px)`;\nconst containerTrans  = (x, y, rot) => {\n  return !x && !y ? 'none' : `translate3d(${x}px, ${y}px, 0px) rotate(${rot}deg)`;\n};\nconst useGestureOpts = { filterTaps: true };\nconst CARD_SHIFT_Y = 13;\nconst TRANSLATE_Z = -30;\nconst TRASHHOLD = 70;\nconst DEBOUNCE = 1000;\n\nconst Deck = forwardRef((props, ref) => {\n  const {\n    adaptiveHeight,\n    shiftY = CARD_SHIFT_Y,\n    items,\n    leftLabel,\n    maxVisibleStack,\n    onDeckHeightChange,\n    onSwipeLeft,\n    onSwipeRight,\n    onSwipeStart,\n    onSwipeEnd,\n    renderItem,\n    // resizeDebounce = DEBOUNCE,\n    rightLabel,\n    translateZ = TRANSLATE_Z,\n    trashhold = TRASHHOLD\n  } = props;\n  const [logs, setLogs] = useState({ drag: {}, heights: [] });\n  const [deck, setDeck] = useState([...items]);\n  const [gone] = useState(() => new Set());\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [label, setLabel] = useState('');\n  const [height, setHeight] = useState(0);\n  const [resize, setResize] = useState(0);\n  const [isCardSwiped, setIsCardSwiped] = useState(false);\n  const [springs, setSprings] = useSprings(deck.length, i => ({ ...to(i, shiftY, translateZ), from: from(i) })); // Create a bunch of springs using the helpers above\n  const containerHeight = height + (deck.length === 1 ? 0 : deck.length <= maxVisibleStack ? deck.length * shiftY : maxVisibleStack * shiftY);\n  // const viewPort = window.innerWidth + 200;\n  // console.log('containerHeight', containerHeight);\n  // console.log('height', height);\n  // console.log('logs', logs);\n  // console.log('resize', resize);\n  console.log('currentIndex', currentIndex);\n  console.log('deck', deck);\n\n  const elements = useRef([{}, false]);\n  const heightRef = useRef(height);\n  const prevItems = useRef(items);\n\n  const cardChildMeasureRef = useCallback(node => {\n    const [elList, isFullList] = elements.current || [{}, false];\n    // setTimeout(() => {\n    //   if (adaptiveHeight && node !== null && elements.current && (!elements.current[0][node.id] || elements.current[0][node.id].offsetHeight !== node.offsetHeight)) {\n    //     // console.log('node.offsetHeight', node.id, node.offsetHeight)\n    //     elements.current[0][node.id] = node;\n    //     elements.current[1] = Object.keys(elements.current[0]).length === deck.length;\n    //     if (elements.current[1]) setResize(n => n + 1);\n    //   }\n    // }, 0);\n    if (adaptiveHeight && node !== null && elements.current && (!elList[node.id] || elList[node.id].offsetHeight !== node.offsetHeight)) {\n      elList[node.id] = node;\n      elements.current[1] = Object.keys(elList).length === deck.length;\n      if (elements.current[1]) setResize(n => n + 1);\n    }\n  }, [deck.length]);\n\n  useEffect(() => {\n    if (adaptiveHeight && elements.current[1]) {\n      function calcMax() {\n        const arr = map(elements.current[0], (el) => {\n          el.style = '';\n          const contentHeight = el.offsetHeight;\n          el.style = 'flex: 1;';\n          return contentHeight;\n        });\n        const max = Math.max(...arr);\n        if (max !== heightRef.current) {\n          heightRef.current = max;\n          setHeight(max);\n        }\n      }\n      function resizeCb() {\n        calcMax();\n      }\n      const debouncedResCb = debounce(resizeCb, 1000);\n      window.addEventListener('resize', debouncedResCb);\n      calcMax();\n      return () => {\n        window.removeEventListener('resize', debouncedResCb);\n      };\n    }\n  }, [adaptiveHeight, resize]);\n\n  useEffect(() => {\n    if (onDeckHeightChange) onDeckHeightChange(containerHeight);\n  }, [containerHeight]);\n\n  useEffect(() => {\n    if (prevItems.current !== items) {\n      gone.clear();\n      // itemsHeight.clear();\n      elements.current = [{}, false];\n      heightRef.current = 0;\n      setHeight(0);\n      setDeck(items);\n      setCurrentIndex(0);\n\n      setIsCardSwiped(false);\n    }\n  }, [JSON.stringify(items)]);\n\n  useEffect(() => prevItems.current = items);\n\n  useImperativeHandle(ref, () => {\n    return {\n      currentIndex,\n      isCardSwiped,\n      jumpToCardIndex,\n      swipeBack,\n      swipeLeft,\n      swipeRight,\n      updateCard,\n    };\n  });\n\n  function updateCard(cardIndex, cb = () => {}) {\n    if (cardIndex >= 0 && deck[cardIndex]) {\n      const updCard = cb(deck[cardIndex]);\n      if (updCard) {\n        const nextDeck = [...deck];\n        nextDeck[cardIndex] = updCard;\n        setDeck(nextDeck);\n      }\n    }\n  }\n\n  function getNextCardsIndexes(currIndex) {\n    return deck[currIndex] ? deck.map((o, i) => i).splice(currIndex, deck.length) : [];\n  }\n\n  function getUngoneIndexes() {\n    return deck.map((o, i) => !gone.has(i) && i).filter(i => i !== false);\n  }\n\n  function getX(dir) {\n    return (200 + window.innerWidth) * dir;\n  }\n\n  function changeLabel(mx = 0, down = false) {\n    if (down && Math.abs(mx) >= trashhold) {\n      setLabel(mx < 0 ? 'left' : 'right');\n    } else {\n      setLabel('');\n    }\n  }\n\n  function jumpToCardIndex(index = 0) {\n    index = +index;\n    if (index >= 0 && deck[index]) {\n      const ungone = getNextCardsIndexes(index);\n      setSprings(i => {\n        if (i < index) {\n          if (!gone.has(i)) {\n            gone.add(i);\n            return { x: (200 + window.innerWidth) * -1, rot: 70, delay: 0, };\n          }\n        } else {\n          if (gone.has(i)) gone.delete(i);\n          return { x: 0, y: ungone.indexOf(i) * 13, z: ungone.indexOf(i) * -30, rot: 0, delay: 0, };\n        }\n      });\n      setCurrentIndex(index);\n    }\n  }\n\n  function swipeBack() {\n    const goneArr = [...gone];\n    const index = goneArr[goneArr.length - 1];\n\n    if (index >= 0 && deck[index]) {\n      gone.delete(index);\n      const ungone = getUngoneIndexes();\n      setSprings(i => {\n        if (!gone.has(i)) {\n          return { x: 0, y: ungone.indexOf(i) * shiftY, z: ungone.indexOf(i) * -30, rot: 0, delay: 0, };\n        }\n      });\n      setCurrentIndex(currentIndex === 0 ? currentIndex : currentIndex - 1);\n      if (gone.size === 0) setIsCardSwiped(false);\n      return { item: deck[index], index };\n    }\n\n    return {};\n  }\n\n  function swipeLeft(index) {\n    const cardIndexToSwipe = index >= 0 ? index : currentIndex;\n    const dir = -1;\n    const x = getX(dir);\n    gone.add(cardIndexToSwipe);\n    const ungone = getUngoneIndexes();\n    setSprings(i => {\n      if (i === cardIndexToSwipe) return { x, rot: 70, delay: 0, config: { friction: 50, tension: 500 } };\n      if (!gone.has(i) && ungone.length) return { x: 0, y: ungone.indexOf(i) * shiftY, z: ungone.indexOf(i) * -30, rot: 0, delay: 0, };\n    });\n    if (cardIndexToSwipe === currentIndex) setCurrentIndex(currentIndex + 1);\n    setIsCardSwiped(true);\n    return { item: deck[cardIndexToSwipe], index: cardIndexToSwipe };\n  }\n\n  function swipeRight(index) {\n    const cardIndexToSwipe = index >= 0 ? index : currentIndex;\n    const dir = 1;\n    const x = getX(dir);\n    gone.add(cardIndexToSwipe);\n    const ungone = getUngoneIndexes();\n    setSprings(i => {\n      if (i === cardIndexToSwipe) return { x, rot: -70, delay: 0, config: { friction: 50, tension: 500 } };\n      if (!gone.has(i) && ungone.length) return { x: 0, y: ungone.indexOf(i) * shiftY, z: ungone.indexOf(i) * -30, rot: 0, delay: 0, };\n    });\n    if (cardIndexToSwipe === currentIndex) setCurrentIndex(currentIndex + 1);\n    setIsCardSwiped(true);\n    return { item: deck[cardIndexToSwipe], index: cardIndexToSwipe };\n  }\n\n  const bind = useDrag(gestureState => {\n    const { event, args: [index], down, movement: [mx], direction: [xDir] } = gestureState;\n    const dir = xDir < 0 ? -1 : 1;\n    const humanDir = mx < 0 ? 'left' : 'right';\n    let onRest = () => {};\n    let isReadyToLeave = false;\n\n    if (onSwipeStart) onSwipeStart(humanDir);\n\n    setSprings(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n      let x = down ? mx : 0;\n      let rot = -1 * Math.floor(mx / 10);\n      isReadyToLeave = Math.abs(mx) >= trashhold && ((xDir <= 0 && humanDir === 'left') || (xDir >= 0 && humanDir === 'right'));\n      changeLabel(mx, down);\n      if (!down && !isReadyToLeave) rot = 0;\n      if (!down && isReadyToLeave) {\n        const ungone = getUngoneIndexes();\n        gone.add(i);\n        x = getX(humanDir === 'left' ? -1 : 1);\n        rot = humanDir === 'left' ? 70 : -70;\n        setCurrentIndex(i + 1);\n        setIsCardSwiped(true);\n        setSprings(i => {\n          if (!gone.has(i) && ungone.length) return { x: 0, y: ungone.indexOf(i) * shiftY, z: ungone.indexOf(i) * -30, rot: 0, delay: 0, };\n        });\n        setLabel('');\n        if (humanDir === 'left') onSwipeLeft(deck[i], i);\n        if (humanDir === 'right') onSwipeRight(deck[i], i);\n      }\n\n      setLogs(o => ({ ...o, drag: { eventType: event.type, pointerType: event.pointerType, down } }));\n\n      return { x, rot, delay: 0, config: { friction: 50, tension: down ? 800 : 500 }, onRest }\n    });\n\n    if (onSwipeEnd) onSwipeEnd(humanDir);\n  }, useGestureOpts);\n\n  return (\n    <React.Fragment>\n      <div style={{ padding: '0 16px', position: 'absolute', zIndex: 999 }}>\n        <div style={{ wordBreak: 'break-all' }}>{'Drag logs: ' + JSON.stringify(logs.drag)}</div>\n        <div style={{ wordBreak: 'break-all' }}>{'Items height: ' + JSON.stringify(logs.heights)}</div>\n        <div style={{ wordBreak: 'break-all' }}>{'height: ' + height}</div>\n        <div style={{ wordBreak: 'break-all' }}>{`Current index: ${currentIndex}`}</div>\n      </div>\n\n      <div className=\"deck-wrapper\" style={{ ...adaptiveHeight && height > 0 ? { minHeight: containerHeight } : {} }}>\n        <div className=\"deck\" style={{ ...adaptiveHeight && height > 0 ? { height } : {} }}>\n          {springs.map(({ x, y, z, rot }, i) => {\n            return (\n              <animated.div\n                key={i}\n                style={{\n                  ...i > currentIndex + maxVisibleStack || i < currentIndex ? { visibility: 'hidden' } : {},\n                  zIndex: i === currentIndex ? 0 : i > currentIndex ? -i : 0,\n                  transform: interpolate([x, y, rot], containerTrans),\n                  touchAction: 'pan-y' /* required on Android */\n                }}\n                className=\"card-container\"\n              >\n                <animated.div\n                  {...bind(i)}\n                  id={`card__${i}`}\n                  style={{\n                    ...adaptiveHeight ? { boxSizing: 'border-box' } : {},\n                    transform: interpolate([z], cardTrans)\n                  }}\n                  className={`card-outer ${i === currentIndex ? 'front-card' : ''}`}\n                >\n                  {i === currentIndex && label === 'left' && leftLabel}\n                  {i === currentIndex && label === 'right' && rightLabel}\n                  <div\n                    id={`card_ch_${i}`}\n                    ref={cardChildMeasureRef}\n                    className=\"card-inner\"\n                    // style={{ ...adaptiveHeight ? { boxSizing: 'border-box' } : {}, /* border-box is required if adaptiveHeight enabled */ }}\n                  >\n                    {renderItem(deck[i], i)}\n                  </div>\n                </animated.div>\n              </animated.div>\n            );\n          })}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n});\n\nDeck.propTypes = {};\n\nexport default memo(Deck);\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Deck from './Deck/Deck';\nimport './App.css';\n\nlet deck_a = [\n  { id: 1, name: 'A' },\n  { id: 2, name: 'B' },\n  { id: 3, name: 'C' },\n  { id: 4, name: 'D' },\n  { id: 5, name: 'E' },\n];\nlet deck_b = [\n  { id: 6, name: 'F' },\n  { id: 7, name: 'G' },\n  { id: 8, name: 'H' },\n  { id: 9, name: 'I' },\n  { id: 10, name: 'J' },\n];\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction getCardsWithRandomHeight(items) {\n  return items.map(o => ({ ...o, height: getRandomInt(50, 250) }));\n}\n\n\nfunction App() {\n  const [items, setItems] = useState(() => getCardsWithRandomHeight(deck_a));\n  const deckRef = useRef(null);\n\n  function addItems() {\n    setItems(prevItems => [...prevItems, ...getCardsWithRandomHeight(deck_b)]);\n  }\n\n  function removeBack() {\n    if (deckRef.current && deckRef.current.swipeBack) {\n      const { item, index } = deckRef.current.swipeBack();\n      console.log('%cremoveBack', 'color: brown', { item, index })\n    }\n  }\n\n  function swipeLeft() {\n    if (deckRef.current && deckRef.current.swipeLeft) {\n      const { item, index } = deckRef.current.swipeLeft();\n      console.log('%cswipeLeft', 'color: green', { item, index })\n    }\n  }\n\n  function swipeRight() {\n    if (deckRef.current && deckRef.current.swipeRight) {\n      const { item, index } = deckRef.current.swipeRight();\n      console.log('%cswipeRight', 'color: blue', { item, index })\n    }\n  }\n\n  function onSwipeLeft(item, index) {\n    console.log('onSwipeLeft', { item, index })\n  }\n\n  function onSwipeRight(item, index) {\n    console.log('onSwipeRight', { item, index })\n  }\n\n  function jumpToCardIndex(index) {\n    if (deckRef.current && deckRef.current.jumpToCardIndex) {\n      deckRef.current.jumpToCardIndex(index);\n    }\n  }\n\n  function updateCardName(value) {\n    if (deckRef.current && deckRef.current.currentIndex >= 0) {\n      const currIndex = deckRef.current.currentIndex;\n      deckRef.current.updateCard(currIndex, (card) => {\n        return { ...card, name: value };\n      });\n    }\n  }\n\n  function onSwipeEnd() {\n    // console.log('END')\n  }\n\n  function onSwipeStart() {\n    // console.log('START')\n  }\n\n  function cardClick(i) {\n    console.log('CLICK', i)\n  }\n\n  const renderItem = useCallback(({ height, name }, i) => (\n    <div className=\"my-card\" key={`cardItem__${i}`}>\n      <div className=\"my-card__img\">\n        image\n      </div>\n      <div className=\"my-card__text-content\" style={{ height }} onClick={() => cardClick(i)}>\n        <div style={{ color: 'red', textAlign: 'center' }}>\n          card text\n          <div>{name}</div>\n        </div>\n      </div>\n    </div>\n  ), []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"controllers-wrapper\">\n        <button className=\"controller\" onClick={addItems}>Add cards</button>\n        <button className=\"controller\" onClick={removeBack}>Return Last</button>\n        <button className=\"controller\" onClick={swipeLeft}>Swipe Left</button>\n        <button className=\"controller\" onClick={swipeRight}>Swipe Right</button>\n        <input id=\"next-index\" type=\"number\" placeholder=\"index\" min={0} className=\"input\"/>\n        <button className=\"controller\" onClick={() => jumpToCardIndex(document.getElementById('next-index').value)}>To index</button>\n        <input id=\"new-name\" placeholder=\"name\" className=\"input\"/>\n        <button className=\"controller\" onClick={() => updateCardName(document.getElementById('new-name').value)}>Set new name</button>\n      </div>\n      <p style={{ padding: '0 16px', margin: 0, color: '#CECECE', fontStyle: 'italic' }}>Deck adapts its height on viewport height change</p>\n      <Deck\n        items={items}\n        renderItem={renderItem}\n        ref={deckRef}\n        adaptiveHeight={true}\n        maxVisibleStack={4}\n        leftLabel={<div style={{ position: 'absolute', right: 0 }}>LEFT</div>}\n        rightLabel={<div style={{ position: 'absolute', left: 0 }}>RIGHT</div>}\n        onSwipeLeft={onSwipeLeft}\n        onSwipeRight={onSwipeRight}\n        onSwipeEnd={onSwipeEnd}\n        onSwipeStart={onSwipeStart}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}